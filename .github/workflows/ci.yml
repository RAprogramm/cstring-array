# SPDX-FileCopyrightText: 2025 RAprogramm <andrey.rozanov.vl@gmail.com>
#
# SPDX-License-Identifier: MIT

name: CI

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'benches/**'
      - 'examples/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - '.rustfmt.toml'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [main]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'benches/**'
      - 'examples/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - '.rustfmt.toml'
      - '.github/workflows/ci.yml'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  format:
    name: Format
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt

      - name: Check formatting
        run: cargo +nightly fmt -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    needs: format
    permissions:
      contents: read
      actions: write
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  reuse:
    name: REUSE Compliance
    runs-on: ubuntu-latest
    needs: clippy
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: REUSE Compliance Check
        uses: fsfe/reuse-action@v4

  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: reuse
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Generate Cargo.lock
        run: cargo generate-lockfile

      - name: Install cargo-audit
        uses: taiki-e/install-action@cargo-audit

      - name: Run security audit
        run: cargo audit

      - name: Install cargo-deny
        uses: taiki-e/install-action@cargo-deny

      - name: Run cargo-deny
        run: cargo deny check

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    needs: audit
    permissions:
      contents: read
      actions: write
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta, nightly]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust ${{ matrix.rust }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-${{ matrix.rust }}

      - name: Install cargo-nextest
        uses: taiki-e/install-action@cargo-nextest

      - name: Run unit and integration tests
        run: cargo nextest run --all-features --profile ci

      - name: Run doctests
        run: cargo test --all-features --doc --verbose

      - name: Generate test summary
        if: always()
        shell: bash
        run: |
          if [ -f target/nextest/ci/junit.xml ]; then
            echo "## Test Results (${{ matrix.os }} / ${{ matrix.rust }})" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "âœ… Tests completed. View detailed results in Codecov." >> $GITHUB_STEP_SUMMARY
            cp target/nextest/ci/junit.xml junit-${{ matrix.os }}-${{ matrix.rust }}.xml
          fi

      - name: Upload test results to Codecov
        if: always()
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: junit-${{ matrix.os }}-${{ matrix.rust }}.xml
          flags: ${{ matrix.os }},${{ matrix.rust }}
          name: tests-${{ matrix.os }}-${{ matrix.rust }}
          fail_ci_if_error: false
          verbose: true

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      actions: write
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Generate coverage
        run: cargo llvm-cov --all-features --lcov --output-path lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info
          fail_ci_if_error: true
          verbose: true

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: format
    permissions:
      contents: read
      actions: write
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Build documentation
        run: cargo doc --no-deps --all-features

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: format
    permissions:
      contents: read
      actions: write
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Build release
        run: cargo build --release --all-features

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    needs: format
    permissions:
      contents: read
      actions: write
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Run benchmarks
        run: cargo bench --no-fail-fast
